#!/bin/bash

# source the ciop functions (e.g. ciop-log, ciop-getparam)
source ${ciop_job_include}

source /application/sen2cor/lib/functions.sh


# define the exit codes
SUCCESS=0
ERR_NO_RESOLUTION=5
ERR_DOWNLOAD_1C=10
ERR_GRANULE_DIR=15
ERR_SEN2COR=20
ERR_LEVEL_2A_DIR=25
ERR_COMPRESSION=30
ERR_PUBLISH=35

# add a trap to exit gracefully
function cleanExit ()
{
  local retval=$?
  local msg=""
  case "${retval}" in
    ${SUCCESS}) msg="Processing successfully concluded";;
    ${ERR_NO_RESOLUTION}) msg="No target resolution provided, must be one of 10, 20 or 60";;
    ${ERR_DOWNLOAD_1C}) msg="Failed to retrieve Sentinel-2 Level 1C product";;
    ${ERR_GRANULE_DIR}) msg="Couldn't find the Sentinel-2 Level 1C product granule directory";;
    ${ERR_SEN2COR}) msg="SEN2COR main binary L2A_Process failed";;
    ${ERR_LEVEL_2A_DIR}) msg="Couldn't find the Sentinel-2 Level 2A product";;
    ${ERR_COMPRESSION}) msg="Failed to compress the Sentinel-2 Level 2A product";;
    ${ERR_PUBLISH}) msg="Failed to publish the Sentinel-2 Level 2A product";;
    *) msg="Unknown error";;
  esac

  [ "${retval}" != "0" ] && ciop-log "ERROR" "Error ${retval} - ${msg}, processing aborted" || ciop-log "INFO" "${msg}"
  exit ${retval}
}

trap cleanExit EXIT

function setGDALEnv() {
  # setup GDAL environment
  export GDAL_HOME=$( find /opt/anaconda/pkgs/ -name "gdal-2.1.0-py27_?" ) 
  export PATH=$GDAL_HOME/bin/:$PATH
  export LD_LIBRARY_PATH=$GDAL_HOME/lib/:/opt/anaconda/pkgs/geos-3.4.2-0/lib:/opt/anaconda/lib:$LD_LIBRARY_PATH
  export GDAL_DATA=$GDAL_HOME/share/gdal
}

function sen2cor_env() {

  # setup SEN2COR environment
  export SEN2COR_BIN=/opt/anaconda/lib/python2.7/site-packages/sen2cor
  export PATH=/opt/anaconda/bin/:$PATH
  export SEN2COR_HOME=$TMPDIR/sen2cor/

  mkdir -p $TMPDIR/sen2cor/cfg
  cp $SEN2COR_BIN/cfg/L2A_GIPP.xml $SEN2COR_HOME/cfg
  cp $SEN2COR_BIN/cfg/L2A_CAL_AC_GIPP.xml $SEN2COR_HOME/cfg/
  cp $SEN2COR_BIN/cfg/L2A_CAL_SC_GIPP.xml $SEN2COR_HOME/cfg/

}

function process_2A() {

  local ref=$1
  local resolution=$2
  local format=$3
  local granules=$4 
  local online_resource=""
  
  
  [ "${ref}" != "-" ] && {
 
    read identifier online_resource startdate enddate orbit_number wrslon < <( opensearch-client -m EOP ${ref} identifier,enclosure,startdate,enddate,orbitNumber,wrsLongitudeGrid  | tr "," " " )
  
    [ -z ${online_resource} ] && return ${ERR_NO_RESOLUTION} 

    local_s2="$( echo "${online_resource}" | ciop-copy -O ${TMPDIR} - )"

    [ ! -d ${local_s2} ] && return ${ERR_DOWNLOAD_1C}

    cd ${local_s2}

    granule_path=${identifier}.SAFE/GRANULE

    [ ! -d ${granule_path} ] && return ${ERR_GRANULE_DIR}

    [ ! -z "${granules}" ] && { 
      ls ${granule_path} | grep -Ev ${granules} | while read dead_granule
      do
        ciop-log "INFO" "Excluding granule ${dead_granule}"
       rm -fr ${granule_path}/${dead_granule}
      done
    }

    ciop-log "INFO" "Invoke SEN2COR L2A_Process"
    L2A_Process --resolution ${resolution} ${identifier}.SAFE 1>&2 # || return ${ERR_SEN2COR}

  } || {
    # TODO implement section for processing tiles (after 06/12/2016)
    ciop-log "WARN" "Can't invoke SEN2COR L2A_Process for products after 06/12/2016"
  }

  [ "${format}" == "GeoTiff" ] && level_2a="$( echo ${identifier} | sed 's/OPER/USER/' | sed 's/MSIL1C/MSIL2A/' )" || level_2a="${identifier}"

  [ ! -d ${level_2a}.SAFE ] && return ${ERR_LEVEL_2A_DIR}

  [ "${format}" == "GeoTiff" ] && {
 
    cd ${level_2a}.SAFE

    metadata="$( find . -maxdepth 1 -name "S2A*.xml" )"
    counter=0
    gdalinfo ${metadata} 2> /dev/null | grep -E  "SUBDATASET_._NAME" \
      | grep -v "PREVIEW" | cut -d "=" -f 2 | while read subset
    do 
      ciop-log "INFO" "Process ${subset}"
      gdal_translate \
        ${subset} \
        ${TMPDIR}/${level_2a}_${counter}.TIF 1>&2 || return ${ERR_GDAL_TRANSLATE}

      #gzip ${TMPDIR}/${level_2a}_${counter}.TIF 1>&2
      echo ${TMPDIR}/${level_2a}_${counter}.TIF #.gz   
   done

  } || {

    ciop-log "INFO" "Compression Level 2A in SAFE format"
 
    tar cfz ${TMPDIR}/${level_2a}.tgz "${level_2a}.SAFE" 1>&2 || return ${ERR_COMPRESSION}
 
    echo ${TMPDIR}/${level_2a}.tgz

  }

}

function main() {

  sen2cor_env
  setGDALEnv

  local resolution="$( ciop-getparam resolution)"
  local format="$( ciop-getparam format )"
  
  while read input 
  do
    ciop-lopg "DEBUG" "Processing ${input}"

    ref="$( echo ${input} | cut -d "," -f 1)"

    read identifier online_resource startdate enddate orbit_number wrslon < <( opensearch-client -m EOP ${ref} identifier,enclosure,startdate,enddate,orbitNumber,wrsLongitudeGrid  | tr "," " " )   

    granules="$( echo $input | cut -d "," -f 2- | tr "," "|")"

    [ "${ref}" == ${granules} ] && granules=""
 
    ciop-log "INFO" "Processsing $( echo ${granules} | tr "|" "\n" | wc -l ) tiles of Sentinel-2 product ${identifier}"

    results="$( process_2A ${ref} ${resolution} ${format} ${granules} || return $? )"

    for result in ${results}
    do 
      # update metadata
      cp /application/sen2cor/etc/eop-template.xml ${result}.xml
      target_xml=${result}.xml
        
      # set identifier
      metadata \
        "//A:EarthObservation/D:metaDataProperty/D:EarthObservationMetaData/D:identifier" \
        "$( basename "${result}" )" \
        ${target_xml} 
 
      # set product type
      metadata \
        "//A:EarthObservation/D:metaDataProperty/D:EarthObservationMetaData/D:productType" \
        "S2A_L2A_PROTO" \
        ${target_xml}
  
      # set processor name
      metadata \
        "//A:EarthObservation/D:metaDataProperty/D:EarthObservationMetaData/D:processing/D:ProcessingInformation/D:processorName" \
        "dcs-sen2cor" \
        ${target_xml}

      metadata \
        "//A:EarthObservation/D:metaDataProperty/D:EarthObservationMetaData/D:processing/D:ProcessingInformation/D:processorVersion" \
        "1.0" \
        ${target_xml}

      # set processor name
      metadata \
        "//A:EarthObservation/D:metaDataProperty/D:EarthObservationMetaData/D:processing/D:ProcessingInformation/D:nativeProductFormat" \
        "${format}" \
        ${target_xml}

      # set processor name
      metadata \
        "//A:EarthObservation/D:metaDataProperty/D:EarthObservationMetaData/D:processing/D:ProcessingInformation/D:processingCenter" \
        "Terradue Cloud Platform" \
        ${target_xml}
  
      # set startdate
      metadata \
        "//A:EarthObservation/B:phenomenonTime/C:TimePeriod/C:beginPosition" \
        "${startdate}" \
        ${target_xml}

      # set stopdate
      metadata \
        "//A:EarthObservation/B:phenomenonTime/C:TimePeriod/C:endPosition" \
        "${enddate}" \
        ${target_xml}   
  
      # set orbit direction
      metadata \
        "//A:EarthObservation/B:procedure/D:EarthObservationEquipment/D:acquisitionParameters/D:Acquisition/D:orbitDirection" \
        "DESCENDING" \
        ${target_xml}

      # set wrsLongitudeGrid
      metadata \
        "//A:EarthObservation/B:procedure/D:EarthObservationEquipment/D:acquisitionParameters/D:Acquisition/D:wrsLongitudeGrid" \
        "${wrslon}" \
        ${target_xml} 

      # set orbitnumber
      metadata \
        "//A:EarthObservation/B:procedure/D:EarthObservationEquipment/D:acquisitionParameters/D:Acquisition/D:orbitNumber" \
        "${orbit_number}" \
        ${target_xml}

      ciop-publish -m ${result} || return ${ERR_PUBLISH}
      ciop-publish -m ${result}.xml || return ${ERR_PUBLISH}
    done
    
    rm -fr S2*
  done

}

cat | main || exit $?

